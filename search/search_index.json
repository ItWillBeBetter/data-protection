{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Data Protection Workshops If you are considering protecting data in your AWS environment using methods such as encryption or certificate management, these workshops can help you learn in depth. Ubiquitous Encryption Data encryption provides a strong layer of security to protect data that you store within AWS services. AWS services can help you achieve ubiquitous encryption for data in transit as well as data at rest. Workshops These workshops demonstrates server side encryption, client side encryption and certfificate management concepts within AWS. For example : Title Description Learning Time Teaching Time With Discussion Level 300: ACM Private CA Best Practices, Monitoring and Templates for code signing certificates This workshop demonstrates private CA best practices, monitoring and use of templates for code siging certs 1 hour 30 mins 2 hours Level 400: ACM Private CA Hierarchy creation, Monitoring using Cloudwatch, IOT Device certs and certificate templates This workshop demonstrates how you can create a complete PKI infrastructure using ACM Private CA and get hands on with creating multiple certificat types, IOT usecases, monitoring using security hub and certificate templates 1 hour 30 mins 2 hours License Summary This sample code is made available under a modified MIT license. See the LICENSE file.","title":"Overview"},{"location":"#aws-data-protection-workshops","text":"If you are considering protecting data in your AWS environment using methods such as encryption or certificate management, these workshops can help you learn in depth.","title":"AWS Data Protection Workshops"},{"location":"#ubiquitous-encryption","text":"Data encryption provides a strong layer of security to protect data that you store within AWS services. AWS services can help you achieve ubiquitous encryption for data in transit as well as data at rest.","title":"Ubiquitous Encryption"},{"location":"#workshops","text":"These workshops demonstrates server side encryption, client side encryption and certfificate management concepts within AWS. For example : Title Description Learning Time Teaching Time With Discussion Level 300: ACM Private CA Best Practices, Monitoring and Templates for code signing certificates This workshop demonstrates private CA best practices, monitoring and use of templates for code siging certs 1 hour 30 mins 2 hours Level 400: ACM Private CA Hierarchy creation, Monitoring using Cloudwatch, IOT Device certs and certificate templates This workshop demonstrates how you can create a complete PKI infrastructure using ACM Private CA and get hands on with creating multiple certificat types, IOT usecases, monitoring using security hub and certificate templates 1 hour 30 mins 2 hours","title":"Workshops"},{"location":"#license-summary","text":"This sample code is made available under a modified MIT license. See the LICENSE file.","title":"License Summary"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"usecase-7/","text":"ACM Private Certificate Authority (ACM Private CA) This workshop demonstrates how ACM Private Certificate Authority (PCA) service can be used to create a complete CA hierarchy, generate a private certificate, and apply the private certificate on an Application Load Balancer while following security best practices. 1. You will be using a AWS provided account for this workshop. If you are logged into your personal AWS account or your corporate AWS account, you should log out now. Open this link in a new browser tab: AWS provided account Log in with your hash Click on the AWS Console button It should bring up a pop-up screen. On the pop-up, under Login Link click on Open Console You should be logged into the AWS provided account Please verify that the region selected is N. Virginia or Oregon Setup Certificate Authority Hierarchy 2. An IAM Role called CaAdminRole is the role that a CA administrator would assume. Assume the role named CaAdminRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Certificate Authority administrator will need for CA administration. As a CA administrator you will be responsible for creating a root and subordinate certificate authority hierarchy If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console 3. Build the infrastructure needed for creating a CA hierarchy by deploying the cloudformation template below Please download the CF template by right clicking and save link as the filename template-ca-admin.yaml CA Admin Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clickking and opening link in a new browser tab Deploy Cloudformation Stack Instructions 4. Create a Root CA. Navigate to ACM Service in the AWS Console Click Get Started under Private Certificate Authority Open this link in a new browser tab for the rest of the steps : Creating a Root CA 5. Create a Subordinate Issuing CA. Navigate to ACM Service in the AWS Console Under Private CA's click on the Create CA button Open this link in a new browser tab for the rest of the steps : Creating a Subordinate CA 6. Quiz time. Open this link in a new browser tab: quiz Create Application 7. An IAM Role called AppDevRole is the role that an application developer would assume. Assume the role named AppDevRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Application developer will need for building an web aplication which is fronted by an application load balancer and behind the load balancer is a lambda origin that provides the HTML code for a website. The application developer will also have permissions to issue a certificate under a certificate authority that they select. If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console 8. Build the application infrastructure by deploying the cloudformation template below Please download the CF template by right clicking and save link as the filename template-appdev.yaml AppDev Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in your AWS account. If you are not familiar with this, follow instructions here by right clicking and opening link in a new browser tab Deploy Cloudformation Stack Instructions This cloudformation deployment takes about 3 minutes to complete. 9. Next step is to issue a private certificate to put on the application load balancer. Open this link in a new browser tab for steps : Issue a private certificate 10. Attach a HTTPS listener and private certificate to the ALB. Open this link in a new browser tab for steps : Attach HTTPS Listener 11. Validate the identity of the ALB with the browser that your are using. Please open link in a new browser tab For Firefox: Validate Certificate Identity on Firefox Browser For Google Chrome: Validate Certificate Identity on Chrome Browser For Microsoft Edge: Validate Certificate Identity on Microsoft Edge Browser For Google Chrome on Windows: Validate Certificate Identity on Windows 12. Quiz time. Open this link in a new browser tab: quiz 13. Cloud9 IDE environment setup Navigate to the Cloud9 service within your AWS console Open the Cloud9 IDE environment called workshop-environment . It takes about 30 seconds for the environment to start up. In the Cloud9 IDE environment you will find a folder called data-protection in the folder pane on the left side of the screen Right-click (on MacOS: control-click) the file named environment-setup.sh in the IDE and select Run This script takes about a minute to complete In the runner window below you should see SUCCESS: installed python dependencies followed by a list of the installed packages Security Monitoring: In this section we will look at how to monitor privileged actions as you build your certificate management infrastructure. We will study two scenerios. The creation of a CA Certificate and mass revocation of end entity certificates. 14. [Scenerio 1]: Monitor Mass Revocation This scenerio shows a developer revoking many end-entity certificates within a short period of time. We want to monitor and notify the security team if this type of privileged action takes place in order to investigate. 15. Create/Revoke End-Entity Certificates First we will act as the Developer by creating and then revoking many certificates at once: Mass revocation 16. Quiz time. Open this link in a new browser tab : quiz 17. Mass Revocation Alarm Setup Setup CloudWatch Alarms: Revocation Alarm setup 18. [Scenerio 2]: CA Certificate Created Creating a CA Certificate is a privileged action that should only be taken by authorized personnel within the CA Hierarchy Management team. For this reason we want to monitor the creation of any CA Certificate within our hierarchy. To do this we will setup a CloudWatch Alarm: CA Cert Alarm setup 19. Quiz time. Open this link in a new browser tab : quiz 20. Create Dashboard Now we have two alarms that have produced ALARM states. This is due to our mass revocation of multiple certificates by the application developer and the creation of a CA Certificate upon creating our CA hierarchy. Organizations can use this mechanism to build dashboards to monitor and alert (SNS, Email, etc) when sensitive actions take place. Create CloudWatch Dashboard: Create Dashboard Advanced Section : In this section we will learn about certificate extensions that can help you use certificates for applications beyond the common case of identifying TLS server endpoints. These include code signing signing Online Certificate Status Protocol (OCSP) responses TLS clients for two-way (mutual) authentication What makes one certificate useful for signing code and another useful for terminating TLS are the extension fields in the certificate. Extension fields, or simply extensions, define the usage of the certificate. There are a few extensions defined in RFC 5280 that are widely commonly used and broadly supported, including Basic Constraints Key Usage Extended Key Usage In this exercise let's create a codesigning certificate using the pre-built templates provided by ACM Private CA. Follow these steps by right clicking and opening this link : Template ACM Private CA Templates allow for constrained usage of certificates for specific usecases and IAM permissions can be used to control which principals - users or roles that can issue a specific kind of certificate. Cleanup AWS Event Don't worry about cleanup, we will take care of it. Hopefully you've learned something useful in this workshop that you can take back your organization. Thank you for coming. On Your Own Disable and delete Root CA and Subordinate CA Delete all three CloudFormation Templates License Summary This sample code is made available under a modified MIT license. See the LICENSE file.","title":"ACM Private Certificate Authority (ACM Private CA)"},{"location":"usecase-7/#acm-private-certificate-authority-acm-private-ca","text":"This workshop demonstrates how ACM Private Certificate Authority (PCA) service can be used to create a complete CA hierarchy, generate a private certificate, and apply the private certificate on an Application Load Balancer while following security best practices.","title":"ACM Private Certificate Authority (ACM Private CA)"},{"location":"usecase-7/#1-you-will-be-using-a-aws-provided-account-for-this-workshop","text":"If you are logged into your personal AWS account or your corporate AWS account, you should log out now. Open this link in a new browser tab: AWS provided account Log in with your hash Click on the AWS Console button It should bring up a pop-up screen. On the pop-up, under Login Link click on Open Console You should be logged into the AWS provided account Please verify that the region selected is N. Virginia or Oregon","title":"1. You will be using a AWS provided account for this workshop."},{"location":"usecase-7/#setup-certificate-authority-hierarchy","text":"","title":"Setup Certificate Authority Hierarchy"},{"location":"usecase-7/#2-an-iam-role-called-caadminrole-is-the-role-that-a-ca-administrator-would-assume","text":"Assume the role named CaAdminRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Certificate Authority administrator will need for CA administration. As a CA administrator you will be responsible for creating a root and subordinate certificate authority hierarchy If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console","title":"2. An IAM Role called CaAdminRole is the role that a CA administrator would assume."},{"location":"usecase-7/#3-build-the-infrastructure-needed-for-creating-a-ca-hierarchy-by-deploying-the-cloudformation-template-below","text":"Please download the CF template by right clicking and save link as the filename template-ca-admin.yaml CA Admin Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clickking and opening link in a new browser tab Deploy Cloudformation Stack Instructions","title":"3. Build the infrastructure needed for creating a CA hierarchy by deploying the cloudformation template below"},{"location":"usecase-7/#4-create-a-root-ca","text":"Navigate to ACM Service in the AWS Console Click Get Started under Private Certificate Authority Open this link in a new browser tab for the rest of the steps : Creating a Root CA","title":"4. Create a Root CA."},{"location":"usecase-7/#5-create-a-subordinate-issuing-ca","text":"Navigate to ACM Service in the AWS Console Under Private CA's click on the Create CA button Open this link in a new browser tab for the rest of the steps : Creating a Subordinate CA","title":"5. Create a Subordinate Issuing CA."},{"location":"usecase-7/#6-quiz-time-open-this-link-in-a-new-browser-tab-quiz","text":"","title":"6. Quiz time. Open this link in a new browser tab: quiz"},{"location":"usecase-7/#create-application","text":"","title":"Create Application"},{"location":"usecase-7/#7-an-iam-role-called-appdevrole-is-the-role-that-an-application-developer-would-assume","text":"Assume the role named AppDevRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Application developer will need for building an web aplication which is fronted by an application load balancer and behind the load balancer is a lambda origin that provides the HTML code for a website. The application developer will also have permissions to issue a certificate under a certificate authority that they select. If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console","title":"7. An IAM Role called AppDevRole is the role that an application developer would assume."},{"location":"usecase-7/#8-build-the-application-infrastructure-by-deploying-the-cloudformation-template-below","text":"Please download the CF template by right clicking and save link as the filename template-appdev.yaml AppDev Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in your AWS account. If you are not familiar with this, follow instructions here by right clicking and opening link in a new browser tab Deploy Cloudformation Stack Instructions This cloudformation deployment takes about 3 minutes to complete.","title":"8. Build the application infrastructure by deploying the cloudformation template below"},{"location":"usecase-7/#9-next-step-is-to-issue-a-private-certificate-to-put-on-the-application-load-balancer","text":"Open this link in a new browser tab for steps : Issue a private certificate","title":"9. Next step is to issue a private certificate to put on the application load balancer."},{"location":"usecase-7/#10-attach-a-https-listener-and-private-certificate-to-the-alb","text":"Open this link in a new browser tab for steps : Attach HTTPS Listener","title":"10. Attach a HTTPS listener and private certificate to the ALB."},{"location":"usecase-7/#11-validate-the-identity-of-the-alb-with-the-browser-that-your-are-using-please-open-link-in-a-new-browser-tab","text":"For Firefox: Validate Certificate Identity on Firefox Browser For Google Chrome: Validate Certificate Identity on Chrome Browser For Microsoft Edge: Validate Certificate Identity on Microsoft Edge Browser For Google Chrome on Windows: Validate Certificate Identity on Windows","title":"11. Validate the identity of the ALB with the browser that your are using. Please open link in a new browser tab"},{"location":"usecase-7/#12-quiz-time-open-this-link-in-a-new-browser-tab-quiz","text":"","title":"12. Quiz time. Open this link in a new browser tab: quiz"},{"location":"usecase-7/#13-cloud9-ide-environment-setup","text":"Navigate to the Cloud9 service within your AWS console Open the Cloud9 IDE environment called workshop-environment . It takes about 30 seconds for the environment to start up. In the Cloud9 IDE environment you will find a folder called data-protection in the folder pane on the left side of the screen Right-click (on MacOS: control-click) the file named environment-setup.sh in the IDE and select Run This script takes about a minute to complete In the runner window below you should see SUCCESS: installed python dependencies followed by a list of the installed packages","title":"13. Cloud9 IDE environment setup"},{"location":"usecase-7/#security-monitoring","text":"In this section we will look at how to monitor privileged actions as you build your certificate management infrastructure. We will study two scenerios. The creation of a CA Certificate and mass revocation of end entity certificates.","title":"Security Monitoring:"},{"location":"usecase-7/#14-scenerio-1-monitor-mass-revocation","text":"This scenerio shows a developer revoking many end-entity certificates within a short period of time. We want to monitor and notify the security team if this type of privileged action takes place in order to investigate.","title":"14. [Scenerio 1]: Monitor Mass Revocation"},{"location":"usecase-7/#15-createrevoke-end-entity-certificates","text":"First we will act as the Developer by creating and then revoking many certificates at once: Mass revocation","title":"15. Create/Revoke End-Entity Certificates"},{"location":"usecase-7/#16-quiz-time-open-this-link-in-a-new-browser-tab-quiz","text":"","title":"16. Quiz time. Open this link in a new browser tab : quiz"},{"location":"usecase-7/#17-mass-revocation-alarm-setup","text":"Setup CloudWatch Alarms: Revocation Alarm setup","title":"17. Mass Revocation Alarm Setup"},{"location":"usecase-7/#18-scenerio-2-ca-certificate-created","text":"Creating a CA Certificate is a privileged action that should only be taken by authorized personnel within the CA Hierarchy Management team. For this reason we want to monitor the creation of any CA Certificate within our hierarchy. To do this we will setup a CloudWatch Alarm: CA Cert Alarm setup","title":"18. [Scenerio 2]: CA Certificate Created"},{"location":"usecase-7/#19-quiz-time-open-this-link-in-a-new-browser-tab-quiz","text":"","title":"19. Quiz time. Open this link in a new browser tab : quiz"},{"location":"usecase-7/#20-create-dashboard","text":"Now we have two alarms that have produced ALARM states. This is due to our mass revocation of multiple certificates by the application developer and the creation of a CA Certificate upon creating our CA hierarchy. Organizations can use this mechanism to build dashboards to monitor and alert (SNS, Email, etc) when sensitive actions take place. Create CloudWatch Dashboard: Create Dashboard","title":"20. Create Dashboard"},{"location":"usecase-7/#advanced-section","text":"In this section we will learn about certificate extensions that can help you use certificates for applications beyond the common case of identifying TLS server endpoints. These include code signing signing Online Certificate Status Protocol (OCSP) responses TLS clients for two-way (mutual) authentication What makes one certificate useful for signing code and another useful for terminating TLS are the extension fields in the certificate. Extension fields, or simply extensions, define the usage of the certificate. There are a few extensions defined in RFC 5280 that are widely commonly used and broadly supported, including Basic Constraints Key Usage Extended Key Usage In this exercise let's create a codesigning certificate using the pre-built templates provided by ACM Private CA. Follow these steps by right clicking and opening this link : Template ACM Private CA Templates allow for constrained usage of certificates for specific usecases and IAM permissions can be used to control which principals - users or roles that can issue a specific kind of certificate.","title":"Advanced Section :"},{"location":"usecase-7/#cleanup","text":"","title":"Cleanup"},{"location":"usecase-7/#aws-event","text":"Don't worry about cleanup, we will take care of it. Hopefully you've learned something useful in this workshop that you can take back your organization. Thank you for coming.","title":"AWS Event"},{"location":"usecase-7/#on-your-own","text":"Disable and delete Root CA and Subordinate CA Delete all three CloudFormation Templates","title":"On Your Own"},{"location":"usecase-7/#license-summary","text":"This sample code is made available under a modified MIT license. See the LICENSE file.","title":"License Summary"},{"location":"usecase-9/","text":"ACM Private Certificate Authority (ACM Private CA) Workshop This workshop demonstrates how ACM Private Certificate Authority (PCA) makes it easy for managing your PKI infrastructure and generating private certificates for TLS terminations on web servers and IOT devices. You will get hands on experience on the following use cases : Creating a complete Certificate Authority(CA) hierarchy Creating a private certificate and putting it on an HTTPS listener of an application load balancer(ALB) that will terminate TLS. The client connection will come from a browser of your choice. Using private certificates on IOT devices so that the IOT devices can authenticate with AWS IOT Core and exchange messages Learn how to monitor security events associated with your private Certificate Authority using Cloudwatch and Security Hub Learn Security best practices for your PKI infrastructure Using certificate templates for generating different certificate types such as code signing, S/MIME email certificates, smart card logon and others. Throughout the workshop theare are multiple quizzes for re:inforced learning 1.A If you are using a AWS provided account for this workshop (at an AWS event) If you are logged into your personal AWS account or your corporate AWS account, you should log out now. Open this link in a new browser tab: AWS provided account Log in with your hash that's provided to you during the event Click on the AWS Console button It should bring up a pop-up screen. On the pop-up, under Login Link click on Open Console You should be logged into the AWS provided account Please verify that the region with staff running the evet 1.B If you are using your own AWS account Log into your desired AWS account You should be logged into the AWS provided account Please verify that you're in the desired region. Please use a AWS region in which AWS Cloud9 and AWS Certificate Managed(ACM) service is available. You can find the supported reqions for a service here : Supported Regions for services To avoid any permissions issues in your account, please make sure that you have administrator access. Also S3 block public access needs to be disabled for the CRL S3 buckets so that these buckets are accessible by the TLS client. Please download the CF template by right clicking this link: Security Admin Cloudfromation Stack and save link as the filename template-security-admin.yaml Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clicking and opening this link Deploy Security Admin Cloudformation Stack Instructions in a new browser tab Deploy Security Admin Cloudformation Stack Instructions Quizzes During the AWS Certificate Management Private CA Workshop you will have the opportunity to take multiple quizzes. To do that, we have embedded quiz links throughout the workshop. We're hoping that you'll take 2 minutes of your time per quiz. This will enhance learning and allow us to hold a discussion during the workshop. This quiz is hosted by an external company (Qualtrics), so the link above does not lead to our website. Please note that AWS will own the data gathered via this quiz, and will not share the information/results collected with quiz respondents. AWS handles your information as described in the AWS Privacy Notice . Let's setup the Certificate Authority Hierarchy 2. An IAM Role called CaAdminRole is the role that a CA administrator would assume. Assume the role named CaAdminRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Certificate Authority administrator will need for CA administration. As a CA administrator, you will be responsible for creating a root and subordinate certificate authority If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console 3. Create Private CA hierarchy You can create Private Root and Subordinate Certificate Authorities either manually (See section 3.A) or through CloudFormation template (See Section 3.B). Please choose the manual or the Cloudformation option but don't do both. 3.A - Create Private CA Hierarch Manually 3.A.1 Build the S3 bucket needed for storing CRL's(Certificate revocation lists) by deploying the cloudformation template below To create S3 bucket that will contain the certificate revocation list (CRL), please download the CF template by right clicking and save link as the filename template-ca-admin.yaml CA Admin Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clickking and opening link in a new browser tab Deploy CA Admin Cloudformation Stack Instructions 3.A.2 Create a Root CA. Navigate to ACM Service in the AWS Console Click Get Started under Private Certificate Authority Open this link in a new browser tab for the rest of the steps : Creating a Root CA 3.A.3 Create a Subordinate Issuing CA. Navigate to ACM Service in the AWS Console Under Private CA's, click on the Create CA button Open this link in a new browser tab for the rest of the steps : Creating a Subordinate CA 3.B - Create full Private CA Hierarch automatically with a CloudFormation Template Please download the CF template by right clicking and save link as the filename template-pca-hierarchy.yaml PCA Hierarchy CF template Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clickking and opening link in a new browser tab Deploy CA Admin Cloudformation Stack Instructions 4. Quiz time. Open this link in a new browser tab: quiz Sections : You can choose any of the sections in the table below. Section Average time to complete section Using Private Certificates on a HTTPS Web Application 35 mins Private Certificates for IOT Devices 45 mins Monitoring ACM Private CA 35 mins Creating different certificate types using Certificate Templates 20 mins This sample code is made available under a modified MIT license. See the LICENSE file. LICENSE Cleanup If you are at an AWS physical or virtual event Don't worry about cleanup, we will take care of it. Hopefully you've learned something useful in this workshop that you can take back your organization. Thank you for coming. If you are doing this workshop on your own Please delete all the Certificate authorities and the certificates that you have created so that you are not billed. License Summary This sample code is made available under a modified MIT license. See the LICENSE file.","title":"ACM Private Certificate Authority (ACM Private CA) Workshop"},{"location":"usecase-9/#acm-private-certificate-authority-acm-private-ca-workshop","text":"This workshop demonstrates how ACM Private Certificate Authority (PCA) makes it easy for managing your PKI infrastructure and generating private certificates for TLS terminations on web servers and IOT devices. You will get hands on experience on the following use cases : Creating a complete Certificate Authority(CA) hierarchy Creating a private certificate and putting it on an HTTPS listener of an application load balancer(ALB) that will terminate TLS. The client connection will come from a browser of your choice. Using private certificates on IOT devices so that the IOT devices can authenticate with AWS IOT Core and exchange messages Learn how to monitor security events associated with your private Certificate Authority using Cloudwatch and Security Hub Learn Security best practices for your PKI infrastructure Using certificate templates for generating different certificate types such as code signing, S/MIME email certificates, smart card logon and others. Throughout the workshop theare are multiple quizzes for re:inforced learning","title":"ACM Private Certificate Authority (ACM Private CA) Workshop"},{"location":"usecase-9/#1a-if-you-are-using-a-aws-provided-account-for-this-workshop-at-an-aws-event","text":"If you are logged into your personal AWS account or your corporate AWS account, you should log out now. Open this link in a new browser tab: AWS provided account Log in with your hash that's provided to you during the event Click on the AWS Console button It should bring up a pop-up screen. On the pop-up, under Login Link click on Open Console You should be logged into the AWS provided account Please verify that the region with staff running the evet","title":"1.A If you are using a AWS provided account for this workshop (at an AWS event)"},{"location":"usecase-9/#1b-if-you-are-using-your-own-aws-account","text":"Log into your desired AWS account You should be logged into the AWS provided account Please verify that you're in the desired region. Please use a AWS region in which AWS Cloud9 and AWS Certificate Managed(ACM) service is available. You can find the supported reqions for a service here : Supported Regions for services To avoid any permissions issues in your account, please make sure that you have administrator access. Also S3 block public access needs to be disabled for the CRL S3 buckets so that these buckets are accessible by the TLS client. Please download the CF template by right clicking this link: Security Admin Cloudfromation Stack and save link as the filename template-security-admin.yaml Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clicking and opening this link Deploy Security Admin Cloudformation Stack Instructions in a new browser tab Deploy Security Admin Cloudformation Stack Instructions","title":"1.B If you are using your own AWS account"},{"location":"usecase-9/#quizzes","text":"During the AWS Certificate Management Private CA Workshop you will have the opportunity to take multiple quizzes. To do that, we have embedded quiz links throughout the workshop. We're hoping that you'll take 2 minutes of your time per quiz. This will enhance learning and allow us to hold a discussion during the workshop. This quiz is hosted by an external company (Qualtrics), so the link above does not lead to our website. Please note that AWS will own the data gathered via this quiz, and will not share the information/results collected with quiz respondents. AWS handles your information as described in the AWS Privacy Notice .","title":"Quizzes"},{"location":"usecase-9/#lets-setup-the-certificate-authority-hierarchy","text":"","title":"Let's setup the Certificate Authority Hierarchy"},{"location":"usecase-9/#2-an-iam-role-called-caadminrole-is-the-role-that-a-ca-administrator-would-assume","text":"Assume the role named CaAdminRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Certificate Authority administrator will need for CA administration. As a CA administrator, you will be responsible for creating a root and subordinate certificate authority If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console","title":"2. An IAM Role called CaAdminRole is the role that a CA administrator would assume."},{"location":"usecase-9/#3-create-private-ca-hierarchy","text":"You can create Private Root and Subordinate Certificate Authorities either manually (See section 3.A) or through CloudFormation template (See Section 3.B). Please choose the manual or the Cloudformation option but don't do both.","title":"3. Create Private CA hierarchy"},{"location":"usecase-9/#3a-create-private-ca-hierarch-manually","text":"","title":"3.A - Create Private CA Hierarch Manually"},{"location":"usecase-9/#3a1-build-the-s3-bucket-needed-for-storing-crlscertificate-revocation-lists-by-deploying-the-cloudformation-template-below","text":"To create S3 bucket that will contain the certificate revocation list (CRL), please download the CF template by right clicking and save link as the filename template-ca-admin.yaml CA Admin Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clickking and opening link in a new browser tab Deploy CA Admin Cloudformation Stack Instructions","title":"3.A.1 Build the S3 bucket needed for storing CRL's(Certificate revocation lists) by deploying the cloudformation template below"},{"location":"usecase-9/#3a2-create-a-root-ca","text":"Navigate to ACM Service in the AWS Console Click Get Started under Private Certificate Authority Open this link in a new browser tab for the rest of the steps : Creating a Root CA","title":"3.A.2 Create a Root CA."},{"location":"usecase-9/#3a3-create-a-subordinate-issuing-ca","text":"Navigate to ACM Service in the AWS Console Under Private CA's, click on the Create CA button Open this link in a new browser tab for the rest of the steps : Creating a Subordinate CA","title":"3.A.3 Create a Subordinate Issuing CA."},{"location":"usecase-9/#3b-create-full-private-ca-hierarch-automatically-with-a-cloudformation-template","text":"Please download the CF template by right clicking and save link as the filename template-pca-hierarchy.yaml PCA Hierarchy CF template Upload and launch the cloudformation stack in the AWS account that you are logged into. If you are not familiar with this, follow instructions here by right clickking and opening link in a new browser tab Deploy CA Admin Cloudformation Stack Instructions","title":"3.B - Create full Private CA Hierarch automatically with a CloudFormation Template"},{"location":"usecase-9/#4-quiz-time-open-this-link-in-a-new-browser-tab-quiz","text":"","title":"4. Quiz time. Open this link in a new browser tab: quiz"},{"location":"usecase-9/#sections","text":"You can choose any of the sections in the table below. Section Average time to complete section Using Private Certificates on a HTTPS Web Application 35 mins Private Certificates for IOT Devices 45 mins Monitoring ACM Private CA 35 mins Creating different certificate types using Certificate Templates 20 mins This sample code is made available under a modified MIT license. See the LICENSE file. LICENSE","title":"Sections :"},{"location":"usecase-9/#cleanup","text":"","title":"Cleanup"},{"location":"usecase-9/#if-you-are-at-an-aws-physical-or-virtual-event","text":"Don't worry about cleanup, we will take care of it. Hopefully you've learned something useful in this workshop that you can take back your organization. Thank you for coming.","title":"If you are at an AWS physical or virtual event"},{"location":"usecase-9/#if-you-are-doing-this-workshop-on-your-own","text":"Please delete all the Certificate authorities and the certificates that you have created so that you are not billed.","title":"If you are doing this workshop on your own"},{"location":"usecase-9/#license-summary","text":"This sample code is made available under a modified MIT license. See the LICENSE file.","title":"License Summary"},{"location":"usecase-9/HTTPS_Application_Usecase/","text":"ACM Private Certificate Authority (ACM Private CA) Internal HTTPS Application use case 7. An IAM Role called AppDevRole is the role that an application developer would assume. Assume the role named AppDevRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Application developer will need for building an web aplication which is fronted by an application load balancer and behind the load balancer is a lambda origin that provides the HTML code for a website. The application developer will also have permissions to issue a certificate under a certificate authority that they select. If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console 8. Build the application infrastructure by deploying the cloudformation template below Please download the CF template by right clicking and save link as the filename template-appdev.yaml AppDev Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in your AWS account. If you are not familiar with this, follow instructions here by right clicking and opening link in a new browser tab Deploy AppDev Cloudformation Stack Instructions This cloudformation deployment takes about 3 minutes to complete. 9. Next step is to issue a private certificate to put on the application load balancer. Open this link in a new browser tab for steps : Issue a private certificate 10. Attach a HTTPS listener and private certificate to the ALB. Open this link in a new browser tab for steps : Attach HTTPS Listener 11. Validate the identity of the ALB with the browser that your are using. Please open link in a new browser tab For Firefox: Validate Certificate Identity on Firefox Browser For Google Chrome: Validate Certificate Identity on Chrome Browser For Microsoft Edge: Validate Certificate Identity on Microsoft Edge Browser For Google Chrome on Windows: Validate Certificate Identity on Windows 12. Quiz time. Open this link in a new browser tab: quiz","title":"ACM Private Certificate Authority (ACM Private CA)"},{"location":"usecase-9/HTTPS_Application_Usecase/#acm-private-certificate-authority-acm-private-ca","text":"","title":"ACM Private Certificate Authority (ACM Private CA)"},{"location":"usecase-9/HTTPS_Application_Usecase/#internal-https-application-use-case","text":"","title":"Internal HTTPS Application use case"},{"location":"usecase-9/HTTPS_Application_Usecase/#7-an-iam-role-called-appdevrole-is-the-role-that-an-application-developer-would-assume","text":"Assume the role named AppDevRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that a Application developer will need for building an web aplication which is fronted by an application load balancer and behind the load balancer is a lambda origin that provides the HTML code for a website. The application developer will also have permissions to issue a certificate under a certificate authority that they select. If you are not familiar with switching roles, follow this tutorial if needed: Assume Role in Console","title":"7. An IAM Role called AppDevRole is the role that an application developer would assume."},{"location":"usecase-9/HTTPS_Application_Usecase/#8-build-the-application-infrastructure-by-deploying-the-cloudformation-template-below","text":"Please download the CF template by right clicking and save link as the filename template-appdev.yaml AppDev Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in your AWS account. If you are not familiar with this, follow instructions here by right clicking and opening link in a new browser tab Deploy AppDev Cloudformation Stack Instructions This cloudformation deployment takes about 3 minutes to complete.","title":"8. Build the application infrastructure by deploying the cloudformation template below"},{"location":"usecase-9/HTTPS_Application_Usecase/#9-next-step-is-to-issue-a-private-certificate-to-put-on-the-application-load-balancer","text":"Open this link in a new browser tab for steps : Issue a private certificate","title":"9. Next step is to issue a private certificate to put on the application load balancer."},{"location":"usecase-9/HTTPS_Application_Usecase/#10-attach-a-https-listener-and-private-certificate-to-the-alb","text":"Open this link in a new browser tab for steps : Attach HTTPS Listener","title":"10. Attach a HTTPS listener and private certificate to the ALB."},{"location":"usecase-9/HTTPS_Application_Usecase/#11-validate-the-identity-of-the-alb-with-the-browser-that-your-are-using-please-open-link-in-a-new-browser-tab","text":"For Firefox: Validate Certificate Identity on Firefox Browser For Google Chrome: Validate Certificate Identity on Chrome Browser For Microsoft Edge: Validate Certificate Identity on Microsoft Edge Browser For Google Chrome on Windows: Validate Certificate Identity on Windows","title":"11. Validate the identity of the ALB with the browser that your are using. Please open link in a new browser tab"},{"location":"usecase-9/HTTPS_Application_Usecase/#12-quiz-time-open-this-link-in-a-new-browser-tab-quiz","text":"","title":"12. Quiz time. Open this link in a new browser tab: quiz"},{"location":"usecase-9/IOT_Device_Usecase/","text":"IOT device certificates : If you are building IOT applications where client devices need to validate their identity to central control servers, you could use AWS IOT core or your own control server that your organization has built. In this section of the workshop, we will go through a hands on exercise showing you how you get client device certificates and deploy them to an IOT device simulator and also how the AWS IOT core validates these device certificates. 0. Create the base template Run the CF template stack template-security-admin.yaml in your isengard account. Also remember that please don't create CRL's when you created CA's as CRL's required public S3 buckets and I would think that your isengard account is probably having the setting of blocking public S3 buckets. 1. An IAM Role called IOTDevRole is the role that an IOT developer would assume. Assume the role named IOTDevRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that an IOT developer will need for building the necessary resources for IOT device certificate authentication use case. If you are not familiar with switching roles, follow this tutorial if needed: Right click on Assume Role in Console 2. Build the infrastructure needed for the IOT usecase by deploying the cloudformation template below Please download the CF template by right clicking and save link as the filename template-iot-dev.yaml IOT Developer Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in your AWS account. If you are not familiar with this, follow instructions here by right clicking and opening link in a new browser tab Deploy IOT Developer Cloudformation Stack Instructions This cloudformation deployment takes about 2 minutes to complete. 3. For the next section, you need a Cloud9 IDE environment setup for executing code. PLease follow the instructions below : Navigate to the Cloud9 service within your AWS console Open the Cloud9 IDE environment called IOT usecase environment . It takes about 30 seconds for the environment to start up. In the Cloud9 IDE environment you will find a folder called AWS-Certificate-Manager-Workshop in the folder pane on the left side of the screen Delete that folder WE need to do this until we get a public github repo. Working on this right now. In the interim do this In your mac terminal do the below : git clone ssh://git.amazon.com/pkg/AWS-Certificate-Manager-Workshop From your laptop Copy the AWS-Certificate-Manager-Workshop directory to S3 in your isengard account. Within your Cloud9 environment copy the whole AWS-Certificate-Manager-Workshop directory into your Cloud9 environment Right-click (on MacOS: control-click) the file named environment-setup.sh in the IDE and select Run This script takes about a minute to complete The script installs various tools and packages for this section of the workshop, see the comments in the script for more information The script is finished when you see environment setup complete , additional log info can be found in the file setup.log 4. Create the verification certificate and get it signed by the Subordinate CA The verification certificate is needed because that's the mechanism that the AWS IOT core uses to ascertain that you have access to the Subordinate CA for signing an end entity certificate. There is also a registration code that's needed in the process and this code is used by the AWS IOT core to ascertain that the principal creating and uploading the verification certificate operation has permissions to access to the IOT Core within the AWS console. In the Cloud9 environment : Open a bash terminal. Change directory to /home/ec2-user/environment by using the following command : cd /home/ec2-user/environment/AWS-Certificate-Manager-Workshop Generate a RSA 2048 key pair using the command below. A file verification_cert.key will be created. openssl genrsa -out verification_cert.key 2048 Each AWS account has a unique IOT registration code. As part of the verification process, the common name of the CSR(Certificate signing request) must be set to the registration code. Let's get the registration code from IOT core to put into the Common name for the CSR. Copy the registration code to your clipboard. aws iot get-registration-code We will now generate the verification certificate signing request(CSR). Fill in values at the prompt and when prompted for Common name enter the registration code(without quotes) as returned by the above command. For other parameters choose anything you like. Don't put anything for the challenge password or optional company name, just press enter and it should be good. openssl req -new -key verification_cert.key -out verification_cert.csr You should see the file verification_cert.csr generated. The verification_cert.csr will be now signed by the subordinate CA and the certificate content is put into a .pem file Run the script verification-cert.sh using the command below : bash verification-cert.sh This script will issue the validation certificate and also get the subordinate CA certificate and upload it to the S3 bucket named certificate-holder-<your-account-number> . The bucket would be in the region that you are currently operating in. At this point the AWS IOT core has determined that you have the necessary permissions to sign a device certificate using the subordinate CA in your account. 5. Download the subordinate CA certificate and verification certificate from the S3 bucket into your laptop Follow the instructions here : Right click and open Download Verification cert and subordinate CA cert 6. Register the CA by uploading Subordinate CA certificate and Verification certificate to IOT core on the AWS console Follow the instructions here : Right click and open Register a CA Now the IOT core is loaded with the subordinate CA certificate. This means that any device certificate that's signed by the Subordinate CA can be trusted and validated by the IOT core. 7. Let's create a device certificate in the Cloud9 environment In this step you will create a device certificate that you will then associate with an IOT thing. Within the Cloud9 environment, open a terminal and execute the following commands to create a RSA key pair for the IOT device: openssl genrsa -out device_cert.key 2048 Let's generate the CSR for the IOT device. For the CSR Parameters, you can put \"iotdevice1\" for Common name but for all other parameters its your choice. Don't set anything for the challenge password and the optional company name. Just press enter for those parameters. Use the following command to generate the CSR(Certificate signing request) openssl req -new -key device_cert.key -out device_cert.csr Run the script device-cert.sh which will issue the device certificate and get it signed by the subordinate CA that you created earlier and upload it to the S3 bucket named certificate-holder-<your-account-number> . You can use the command below : bash device-cert.sh 8. Download the device certificate from S3 back to the Cloud9 environment Go to the S3 console and follow the instructions below : Right click and open Download the device cert from S3 9. Create the IOT Policy that provides permissions for publishing and subscribing to a IOT topic The IOT policy attached to a thing or a device provides permissions to a device or a thing for topics the IOT thing can publish and subscribe to. The policy also provides the ability to add a name to the thing that connects to the IOT core. Follow the instructions here : Right click and open Create IOT policy You have now created a policy called alexa_temperature_policy . This policy will allow a IOT device to publish to a topic named 'alexa/temperature'. For example think of a IOT device recording temperature and is publishing to this IOT topic called alexa/temperature . You will attach the policy to a IOT thing in later steps. 10. Register the device certificate and create a thing within the IOT core service Follow the instructions here : Right click and open Create and register a IOT thing 11. Configuring the MQTT(Standard for IOT Messaing) Client We will be using a MQTT client to simulate a IOT device. An MQTT cliens has been pre-installed in your Cloud9 environment. The mqtt client needs to communicate with the IOT core endpoint and the various certificates and keys required for a mutual TLS connection between the mqtt client and the AWS IOT core endpoint have been configured within the config.properties mqq configuration file. Open the mqtt configuration file from a bash terminal in your Cloud9 environment: c9 open /home/ec2-user/.mqtt-cli/config.properties In a bash terminal withiny our Cloud9 environment, use the following cli command in the terminal to get the mqtt endpoint URL or mqtt host aws iot describe-endpoint --endpoint-type iot:Data-ATS The output will be in this format { \"endpointAddress\": \"b12qfcnz2tnjiu-ats.iot.us-east-1.amazonaws.com\" } Copy the value of the parameter endpointAddress into the value of mqtt.host in the config.properties file. Also change the other properties to the values shown below. Don't forget to save the file. mqtt.port=8883 mqtt.host= {Value of the endpointAddress produced by the above describe-endpoint CLI Command} mqtt.version=3 client.id.prefix=mydevice 12. Pub sub exercise where we can see messages flowing between the device simulator and the IOT core topic over a HTTPS connection. Navigate to the AWS IOT core service in a browser tab and follow the instructions below : Right click and open Subscribe to a IOT topic Publishing from MQTT Client to IOT core: Open the mqtt shell by typing the following command : mqtt shell Publishing from MQTT client to IOT core Connect to IOT core using the following command and then publish the Hello message using the pub command. Press enter after each command : con -i mydevice pub -t alexa/temperature -m Hello Follow instructions here to see the message sfomr the MQTT Client published to the IOT core: Right click and open See the IOT device message published type **disconnect** and press enter to Disconnect from the IOT core connection type exit and press enter to exit out of the MQTT shell Publishing from IOT core to the MQTT Client: Open the mqtt shell by typing the following command : mqtt shell Connect to IOT core using the following command : con -i mydevice subscribe to the topic monthly_average_temperature by executing the following command : sub -q 1 -t cloud/monthly_average_temperature -s -oc From the IOT Core console, publish to the topic cloud/monthly_average_temperature You should see the message \"Hello from the IOT console\" on the mqtt client within your Cloud9 environment","title":"IOT Device Usecase"},{"location":"usecase-9/IOT_Device_Usecase/#iot-device-certificates","text":"If you are building IOT applications where client devices need to validate their identity to central control servers, you could use AWS IOT core or your own control server that your organization has built. In this section of the workshop, we will go through a hands on exercise showing you how you get client device certificates and deploy them to an IOT device simulator and also how the AWS IOT core validates these device certificates.","title":"IOT device certificates :"},{"location":"usecase-9/IOT_Device_Usecase/#0-create-the-base-template","text":"Run the CF template stack template-security-admin.yaml in your isengard account. Also remember that please don't create CRL's when you created CA's as CRL's required public S3 buckets and I would think that your isengard account is probably having the setting of blocking public S3 buckets.","title":"0. Create the base template"},{"location":"usecase-9/IOT_Device_Usecase/#1-an-iam-role-called-iotdevrole-is-the-role-that-an-iot-developer-would-assume","text":"Assume the role named IOTDevRole by using switch role on the AWS console in the AWS account that you are currently logged into This role has permissions that an IOT developer will need for building the necessary resources for IOT device certificate authentication use case. If you are not familiar with switching roles, follow this tutorial if needed: Right click on Assume Role in Console","title":"1. An IAM Role called IOTDevRole is the role that an IOT developer would assume."},{"location":"usecase-9/IOT_Device_Usecase/#2-build-the-infrastructure-needed-for-the-iot-usecase-by-deploying-the-cloudformation-template-below","text":"Please download the CF template by right clicking and save link as the filename template-iot-dev.yaml IOT Developer Cloudformation Stack by right clicking and saving the yaml file on your laptop. Upload and launch the cloudformation stack in your AWS account. If you are not familiar with this, follow instructions here by right clicking and opening link in a new browser tab Deploy IOT Developer Cloudformation Stack Instructions This cloudformation deployment takes about 2 minutes to complete.","title":"2. Build the infrastructure needed for the IOT usecase by deploying the cloudformation template below"},{"location":"usecase-9/IOT_Device_Usecase/#3-for-the-next-section-you-need-a-cloud9-ide-environment-setup-for-executing-code-please-follow-the-instructions-below","text":"Navigate to the Cloud9 service within your AWS console Open the Cloud9 IDE environment called IOT usecase environment . It takes about 30 seconds for the environment to start up. In the Cloud9 IDE environment you will find a folder called AWS-Certificate-Manager-Workshop in the folder pane on the left side of the screen Delete that folder WE need to do this until we get a public github repo. Working on this right now. In the interim do this In your mac terminal do the below : git clone ssh://git.amazon.com/pkg/AWS-Certificate-Manager-Workshop From your laptop Copy the AWS-Certificate-Manager-Workshop directory to S3 in your isengard account. Within your Cloud9 environment copy the whole AWS-Certificate-Manager-Workshop directory into your Cloud9 environment Right-click (on MacOS: control-click) the file named environment-setup.sh in the IDE and select Run This script takes about a minute to complete The script installs various tools and packages for this section of the workshop, see the comments in the script for more information The script is finished when you see environment setup complete , additional log info can be found in the file setup.log","title":"3. For the next section, you need a Cloud9 IDE environment setup for executing code. PLease follow the instructions below :"},{"location":"usecase-9/IOT_Device_Usecase/#4-create-the-verification-certificate-and-get-it-signed-by-the-subordinate-ca","text":"The verification certificate is needed because that's the mechanism that the AWS IOT core uses to ascertain that you have access to the Subordinate CA for signing an end entity certificate. There is also a registration code that's needed in the process and this code is used by the AWS IOT core to ascertain that the principal creating and uploading the verification certificate operation has permissions to access to the IOT Core within the AWS console. In the Cloud9 environment : Open a bash terminal. Change directory to /home/ec2-user/environment by using the following command : cd /home/ec2-user/environment/AWS-Certificate-Manager-Workshop Generate a RSA 2048 key pair using the command below. A file verification_cert.key will be created. openssl genrsa -out verification_cert.key 2048 Each AWS account has a unique IOT registration code. As part of the verification process, the common name of the CSR(Certificate signing request) must be set to the registration code. Let's get the registration code from IOT core to put into the Common name for the CSR. Copy the registration code to your clipboard. aws iot get-registration-code We will now generate the verification certificate signing request(CSR). Fill in values at the prompt and when prompted for Common name enter the registration code(without quotes) as returned by the above command. For other parameters choose anything you like. Don't put anything for the challenge password or optional company name, just press enter and it should be good. openssl req -new -key verification_cert.key -out verification_cert.csr You should see the file verification_cert.csr generated. The verification_cert.csr will be now signed by the subordinate CA and the certificate content is put into a .pem file Run the script verification-cert.sh using the command below : bash verification-cert.sh This script will issue the validation certificate and also get the subordinate CA certificate and upload it to the S3 bucket named certificate-holder-<your-account-number> . The bucket would be in the region that you are currently operating in. At this point the AWS IOT core has determined that you have the necessary permissions to sign a device certificate using the subordinate CA in your account.","title":"4. Create the verification certificate and get it signed by the Subordinate CA"},{"location":"usecase-9/IOT_Device_Usecase/#5-download-the-subordinate-ca-certificate-and-verification-certificate-from-the-s3-bucket-into-your-laptop","text":"Follow the instructions here : Right click and open Download Verification cert and subordinate CA cert","title":"5. Download the subordinate CA certificate and verification certificate from the S3 bucket into your laptop"},{"location":"usecase-9/IOT_Device_Usecase/#6-register-the-ca-by-uploading-subordinate-ca-certificate-and-verification-certificate-to-iot-core-on-the-aws-console","text":"Follow the instructions here : Right click and open Register a CA Now the IOT core is loaded with the subordinate CA certificate. This means that any device certificate that's signed by the Subordinate CA can be trusted and validated by the IOT core.","title":"6. Register the CA by uploading Subordinate CA certificate and Verification certificate to IOT core on the AWS console"},{"location":"usecase-9/IOT_Device_Usecase/#7-lets-create-a-device-certificate-in-the-cloud9-environment","text":"In this step you will create a device certificate that you will then associate with an IOT thing. Within the Cloud9 environment, open a terminal and execute the following commands to create a RSA key pair for the IOT device: openssl genrsa -out device_cert.key 2048 Let's generate the CSR for the IOT device. For the CSR Parameters, you can put \"iotdevice1\" for Common name but for all other parameters its your choice. Don't set anything for the challenge password and the optional company name. Just press enter for those parameters. Use the following command to generate the CSR(Certificate signing request) openssl req -new -key device_cert.key -out device_cert.csr Run the script device-cert.sh which will issue the device certificate and get it signed by the subordinate CA that you created earlier and upload it to the S3 bucket named certificate-holder-<your-account-number> . You can use the command below : bash device-cert.sh","title":"7. Let's create a device certificate in the Cloud9 environment"},{"location":"usecase-9/IOT_Device_Usecase/#8-download-the-device-certificate-from-s3-back-to-the-cloud9-environment","text":"Go to the S3 console and follow the instructions below : Right click and open Download the device cert from S3","title":"8. Download the device certificate from S3 back to the Cloud9 environment"},{"location":"usecase-9/IOT_Device_Usecase/#9-create-the-iot-policy-that-provides-permissions-for-publishing-and-subscribing-to-a-iot-topic","text":"The IOT policy attached to a thing or a device provides permissions to a device or a thing for topics the IOT thing can publish and subscribe to. The policy also provides the ability to add a name to the thing that connects to the IOT core. Follow the instructions here : Right click and open Create IOT policy You have now created a policy called alexa_temperature_policy . This policy will allow a IOT device to publish to a topic named 'alexa/temperature'. For example think of a IOT device recording temperature and is publishing to this IOT topic called alexa/temperature . You will attach the policy to a IOT thing in later steps.","title":"9. Create the IOT Policy that provides permissions for publishing and subscribing to a IOT topic"},{"location":"usecase-9/IOT_Device_Usecase/#10-register-the-device-certificate-and-create-a-thing-within-the-iot-core-service","text":"Follow the instructions here : Right click and open Create and register a IOT thing","title":"10. Register the device certificate and create a thing within the IOT core service"},{"location":"usecase-9/IOT_Device_Usecase/#11-configuring-the-mqttstandard-for-iot-messaing-client","text":"We will be using a MQTT client to simulate a IOT device. An MQTT cliens has been pre-installed in your Cloud9 environment. The mqtt client needs to communicate with the IOT core endpoint and the various certificates and keys required for a mutual TLS connection between the mqtt client and the AWS IOT core endpoint have been configured within the config.properties mqq configuration file. Open the mqtt configuration file from a bash terminal in your Cloud9 environment: c9 open /home/ec2-user/.mqtt-cli/config.properties In a bash terminal withiny our Cloud9 environment, use the following cli command in the terminal to get the mqtt endpoint URL or mqtt host aws iot describe-endpoint --endpoint-type iot:Data-ATS The output will be in this format { \"endpointAddress\": \"b12qfcnz2tnjiu-ats.iot.us-east-1.amazonaws.com\" } Copy the value of the parameter endpointAddress into the value of mqtt.host in the config.properties file. Also change the other properties to the values shown below. Don't forget to save the file. mqtt.port=8883 mqtt.host= {Value of the endpointAddress produced by the above describe-endpoint CLI Command} mqtt.version=3 client.id.prefix=mydevice","title":"11. Configuring the MQTT(Standard for IOT Messaing) Client"},{"location":"usecase-9/IOT_Device_Usecase/#12-pub-sub-exercise-where-we-can-see-messages-flowing-between-the-device-simulator-and-the-iot-core-topic-over-a-https-connection","text":"Navigate to the AWS IOT core service in a browser tab and follow the instructions below : Right click and open Subscribe to a IOT topic Publishing from MQTT Client to IOT core: Open the mqtt shell by typing the following command : mqtt shell Publishing from MQTT client to IOT core Connect to IOT core using the following command and then publish the Hello message using the pub command. Press enter after each command : con -i mydevice pub -t alexa/temperature -m Hello Follow instructions here to see the message sfomr the MQTT Client published to the IOT core: Right click and open See the IOT device message published type **disconnect** and press enter to Disconnect from the IOT core connection type exit and press enter to exit out of the MQTT shell Publishing from IOT core to the MQTT Client: Open the mqtt shell by typing the following command : mqtt shell Connect to IOT core using the following command : con -i mydevice subscribe to the topic monthly_average_temperature by executing the following command : sub -q 1 -t cloud/monthly_average_temperature -s -oc From the IOT Core console, publish to the topic cloud/monthly_average_temperature You should see the message \"Hello from the IOT console\" on the mqtt client within your Cloud9 environment","title":"12. Pub sub exercise where we can see messages flowing between the device simulator and the IOT core topic over a HTTPS connection."},{"location":"usecase-9/Monitoring_ACM_Private_CA/","text":"Security Monitoring: In this section we will look at how to monitor privileged actions as you build your certificate management infrastructure. We will study two scenerios. The creation of a CA Certificate and mass revocation of end entity certificates. 13. [Scenario 1]: Monitoring with Security Hub In previous Creating a CA Certificate is a privileged action that should only be taken by authorized personnel within the CA Hierarchy Management team. For this reason we want to monitor the creation of any CA Certificate within our hierarchy. To do this we will check the findings within Security Hub: View results . 14. [Scenario 2]: Monitor Mass Revocation This scenario shows a developer revoking many end-entity certificates within a short period of time. We want to monitor and notify the security team if this type of privileged action takes place in order to investigate. 15. Create/Revoke End-Entity Certificates First we will act as the Developer by creating and then revoking many certificates at once: Mass revocation 16. Quiz time. Open this link in a new browser tab : Quiz 17. Monitor revocation of certificates We will navigate to Security Hub in order to monitor revocation of certificates: View results","title":"Monitoring ACM Private CA"},{"location":"usecase-9/Monitoring_ACM_Private_CA/#security-monitoring","text":"In this section we will look at how to monitor privileged actions as you build your certificate management infrastructure. We will study two scenerios. The creation of a CA Certificate and mass revocation of end entity certificates.","title":"Security Monitoring:"},{"location":"usecase-9/Monitoring_ACM_Private_CA/#13-scenario-1-monitoring-with-security-hub","text":"In previous Creating a CA Certificate is a privileged action that should only be taken by authorized personnel within the CA Hierarchy Management team. For this reason we want to monitor the creation of any CA Certificate within our hierarchy. To do this we will check the findings within Security Hub: View results .","title":"13. [Scenario 1]: Monitoring with Security Hub"},{"location":"usecase-9/Monitoring_ACM_Private_CA/#14-scenario-2-monitor-mass-revocation","text":"This scenario shows a developer revoking many end-entity certificates within a short period of time. We want to monitor and notify the security team if this type of privileged action takes place in order to investigate.","title":"14. [Scenario 2]: Monitor Mass Revocation"},{"location":"usecase-9/Monitoring_ACM_Private_CA/#15-createrevoke-end-entity-certificates","text":"First we will act as the Developer by creating and then revoking many certificates at once: Mass revocation","title":"15. Create/Revoke End-Entity Certificates"},{"location":"usecase-9/Monitoring_ACM_Private_CA/#16-quiz-time-open-this-link-in-a-new-browser-tab-quiz","text":"","title":"16. Quiz time. Open this link in a new browser tab : Quiz"},{"location":"usecase-9/Monitoring_ACM_Private_CA/#17-monitor-revocation-of-certificates","text":"We will navigate to Security Hub in order to monitor revocation of certificates: View results","title":"17. Monitor revocation of certificates"},{"location":"usecase-9/Templates_ACM_Private_CA/","text":"Templates : Overview In this section, we will learn about certificate extensions that can help you use certificates for applications beyond the common ubiquitous case of identifying TLS server endpoints. These include Code signing Signing Online Certificate Status Protocol (OCSP) responses ADCS certificates What makes one certificate useful for signing code and another useful for terminating TLS are the various fields and extensions in the certificate. Extension fields, or simply extensions, define the usage of the certificate. There are a few extensions defined in RFC 5280 that are commonly used and broadly supported, including Basic Constraints Key Usage Extended Key Usage ACM Private CA provides complete flexibility in generating various kinds of certificates using four varities of templates : Base template CSRPassthrough templates APIPassthrough templates APICSRPassthrough templates In this usecase, you will learn how different certificate types can be issued by using the different template types that are available : Default template example : In this exercise, you will create a code signing certificate using the pre-built templates provided by ACM Private CA. Follow these steps by right clicking and opening this link : Template ACM Private CA Blank template example : ACM Private CA provides a blank template where you can control certificate parameters or extensions by using CSR passthrough or API passthrough. The blank template is useful if you need complete customization of certifcates, such as building email certificates, smartcard logon certificates or any others where you need to fully control certificate parameters or extensions. We will be using the issuecertificate API call. Email Certificates In this example, we will see how to use Blank templates to generate email S/MIME certificates using the BlankEndEntityCertificate_APIPassthrough/V1 template. But first what is an email certificate? Email certificates use the S/MIME (Secure/Multipurpose Internet Mail Extensions) standard . The main purposes of S/MIME certificates are: * Authentication / Message integrity * Data security (encryption) Keep in mind, while we are splitting out the signing and encryption email certificates, you can create a single certificate for both. Email Signing Certificate This S/MIME certificate verifies the email sender's identity for the recipient. More generally, it allows users to digitally sign their emails to verify their identity through the attestation of a trusted third party known as a certificate authority (CA). Follow these steps by right clicking and opening this link : Email Signing Certificate Creation - ACM Private CA Email Encryption Certificate This S/MIME certificate encrypts the actual content being sent via email. More generally, it allows users to encrypt the entire contents (messages, attachments, etc.) of their emails so that the information is secure before it transmits from server to server across the internet. This helps to protect the data from man-in-the-middle (MitM) attacks. Follow these steps by right clicking and opening this link : Email Encryption Certificate Creation - ACM Private CA Takeaways Notice that with Email Signing Certificate the KeyUsage is 'DigitalSignature' and 'NonRepudiation'. This makes sense because we are protecting concerned with authentication and message integrity. With Email Encryption Certificate the KeyUsage is 'KeyEncipherment' since we are encrypting the contents of the email. Conclusion As you can see this created two .pem files with the contents of the certificates. The first certificate is for S/MIME Signing and the second is for S/MIME Encryption. Keep in mind you can combine them into one certificate if needed, however some organizations split these up so that if one is not available, employees can still send signed, unencrypted emails. Some email client will require you to convert it to PKCS12 format .","title":"Templates :"},{"location":"usecase-9/Templates_ACM_Private_CA/#templates","text":"","title":"Templates :"},{"location":"usecase-9/Templates_ACM_Private_CA/#overview","text":"In this section, we will learn about certificate extensions that can help you use certificates for applications beyond the common ubiquitous case of identifying TLS server endpoints. These include Code signing Signing Online Certificate Status Protocol (OCSP) responses ADCS certificates What makes one certificate useful for signing code and another useful for terminating TLS are the various fields and extensions in the certificate. Extension fields, or simply extensions, define the usage of the certificate. There are a few extensions defined in RFC 5280 that are commonly used and broadly supported, including Basic Constraints Key Usage Extended Key Usage ACM Private CA provides complete flexibility in generating various kinds of certificates using four varities of templates : Base template CSRPassthrough templates APIPassthrough templates APICSRPassthrough templates In this usecase, you will learn how different certificate types can be issued by using the different template types that are available :","title":"Overview"},{"location":"usecase-9/Templates_ACM_Private_CA/#default-template-example","text":"In this exercise, you will create a code signing certificate using the pre-built templates provided by ACM Private CA. Follow these steps by right clicking and opening this link : Template ACM Private CA","title":"Default template example :"},{"location":"usecase-9/Templates_ACM_Private_CA/#blank-template-example","text":"ACM Private CA provides a blank template where you can control certificate parameters or extensions by using CSR passthrough or API passthrough. The blank template is useful if you need complete customization of certifcates, such as building email certificates, smartcard logon certificates or any others where you need to fully control certificate parameters or extensions. We will be using the issuecertificate API call.","title":"Blank template example :"},{"location":"usecase-9/Templates_ACM_Private_CA/#email-certificates","text":"In this example, we will see how to use Blank templates to generate email S/MIME certificates using the BlankEndEntityCertificate_APIPassthrough/V1 template. But first what is an email certificate? Email certificates use the S/MIME (Secure/Multipurpose Internet Mail Extensions) standard . The main purposes of S/MIME certificates are: * Authentication / Message integrity * Data security (encryption) Keep in mind, while we are splitting out the signing and encryption email certificates, you can create a single certificate for both.","title":"Email Certificates"},{"location":"usecase-9/Templates_ACM_Private_CA/#email-signing-certificate","text":"This S/MIME certificate verifies the email sender's identity for the recipient. More generally, it allows users to digitally sign their emails to verify their identity through the attestation of a trusted third party known as a certificate authority (CA). Follow these steps by right clicking and opening this link : Email Signing Certificate Creation - ACM Private CA","title":"Email Signing Certificate"},{"location":"usecase-9/Templates_ACM_Private_CA/#email-encryption-certificate","text":"This S/MIME certificate encrypts the actual content being sent via email. More generally, it allows users to encrypt the entire contents (messages, attachments, etc.) of their emails so that the information is secure before it transmits from server to server across the internet. This helps to protect the data from man-in-the-middle (MitM) attacks. Follow these steps by right clicking and opening this link : Email Encryption Certificate Creation - ACM Private CA","title":"Email Encryption Certificate"},{"location":"usecase-9/Templates_ACM_Private_CA/#takeaways","text":"Notice that with Email Signing Certificate the KeyUsage is 'DigitalSignature' and 'NonRepudiation'. This makes sense because we are protecting concerned with authentication and message integrity. With Email Encryption Certificate the KeyUsage is 'KeyEncipherment' since we are encrypting the contents of the email.","title":"Takeaways"},{"location":"usecase-9/Templates_ACM_Private_CA/#conclusion","text":"As you can see this created two .pem files with the contents of the certificates. The first certificate is for S/MIME Signing and the second is for S/MIME Encryption. Keep in mind you can combine them into one certificate if needed, however some organizations split these up so that if one is not available, employees can still send signed, unencrypted emails. Some email client will require you to convert it to PKCS12 format .","title":"Conclusion"}]}